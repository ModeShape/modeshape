<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.modeshape</groupId>
        <artifactId>modeshape-parent</artifactId>
        <version>5.4-SNAPSHOT</version>
        <relativePath>../modeshape-parent/pom.xml</relativePath>
    </parent>

    <!-- The groupId and version values are inherited from parent -->
    <artifactId>modeshape-jdbc</artifactId>
    <packaging>jar</packaging>
    <name>ModeShape JDBC Driver</name>
    <description>JDBC driver to allow clients to use JCR-SQL2 to query a local or remote ModeShape JCR repository.</description>
    <url>http://www.modeshape.org</url>
    <!--
      Define the dependencies. Note that all version and scopes default to those defined in the dependencyManagement section of the
      parent pom.
    -->
    <dependencies>
        <dependency>
            <groupId>javax.jcr</groupId>
            <artifactId>jcr</artifactId>
        </dependency>
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-common</artifactId>
        </dependency>
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-jcr-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-jdbc-local</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jettison</groupId>
            <artifactId>jettison</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <!--
        Testing (note the scope)
        -->
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-common</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-jcr</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-jcr</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-schematic</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-jdbc-local</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.modeshape</groupId>
            <artifactId>modeshape-web-jcr-rest-war</artifactId>
            <type>war</type>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>
        <!--
          PicketBox (JAAS implementation used in test cases)
          -->
        <dependency>
            <groupId>org.picketbox</groupId>
            <artifactId>picketbox-bare</artifactId>
        </dependency>
        <!--
        Logging (require SLF4J API for compiling, but use Log4J and its SLF4J binding for testing)
        -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>*</include>
                    <include>**/*</include>
                </includes>
            </resource>
            <!-- Apply the properties set in the POM to the resource files -->
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/JdbcI18n.properties</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <!--During the default test phase, excluded the Http tests which will run during the integration phase-->
                    <execution>
                        <!--The id of the default test phase of the maven plugin (do not change) -->
                        <id>default-test</id>
                        <configuration>
                            <excludes>
                                <exclude>**/*Http*Test.java</exclude>
                                <exclude>**/rest/*.java</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <!--Execute the Http tests during the integration tests, in a running cargo container -->
                    <execution>
                        <id>integration-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <includes>
                                <include>**/*Http*Test.java</include>
                                <include>**/rest/*.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--Configuration inherited from parent pom -->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <configuration>
                    <deployables>
                        <!-- application to deploy (brought in as a transitive dependency of modeshape-rest-client -->
                        <deployable>
                            <groupId>org.modeshape</groupId>
                            <artifactId>modeshape-web-jcr-rest-war</artifactId>
                            <type>war</type>
                            <properties>
                                <context>modeshape</context>
                            </properties>
                        </deployable>
                    </deployables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>assembly</id>
            <properties>
                <tempjars.directory>${project.build.directory}/tempjars</tempjars.directory>
                <ant.parse.directory>${project.build.directory}/ant_parse</ant.parse.directory>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <!--Create a folder with all the JARs required to build the final FAT JAR  -->
                            <execution>
                                <id>default</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <attach>false</attach>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <finalName>tempjars</finalName>
                                    <descriptors>
                                        <descriptor>src/assembly/dependency-jars.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </execution>

                            <!--Creates an assembly which will be included in the binary distribution -->
                            <execution>
                                <id>module-with-dependencies</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <attach>false</attach>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <descriptorRefs>
                                        <descriptorRef>module-with-dependencies</descriptorRef>
                                    </descriptorRefs>
                                    <archive>
                                        <manifest>
                                            <addClasspath>true</addClasspath>
                                        </manifest>
                                    </archive>
                                    <finalName>${binary.dist.name}</finalName>
                                </configuration>
                            </execution>
                            
                            <!--After ANT has processed the JARs (see below) build the final assembly-->
                            <execution>
                                <id>build-driver</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <attach>true</attach>
                                    <appendAssemblyId>true</appendAssemblyId>
                                    <descriptors>
                                        <descriptor>src/assembly/driver.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </execution>
                       
                        </executions>
                    </plugin>
                    <!-- Run the ANT plugin to parse and prepare the contents of the FAT jar -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>repackage-client-jar</id>
                                <phase>package</phase>
                                <configuration>
                                    <target>
                                        <unzip src="${tempjars.directory}/jcr-${version.javax.jcr}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <unzip src="${tempjars.directory}/modeshape-common-${project.version}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <unzip src="${tempjars.directory}/modeshape-jcr-api-${project.version}.jar"
                                               dest="${ant.parse.directory}"/>

                                        <unzip src="${tempjars.directory}/commons-codec-1.9.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/LICENSE.txt"
                                              tofile="${ant.parse.directory}/META-INF/LICENSE_commons-codec.txt"/>

                                        <unzip src="${tempjars.directory}/commons-logging-1.2.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/LICENSE.txt"
                                              tofile="${ant.parse.directory}/META-INF/LICENSE_commons-logging.txt"/>
                                        <move file="${ant.parse.directory}/META-INF/NOTICE.txt"
                                              tofile="${ant.parse.directory}/META-INF/NOTICE_commons-logging.txt"/>

                                        <unzip src="${tempjars.directory}/httpclient-${version.org.apache.httpcomponents}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/LICENSE"
                                              tofile="${ant.parse.directory}/META-INF/LICENSE_httpclient.txt"/>
                                        <move file="${ant.parse.directory}/META-INF/NOTICE"
                                              tofile="${ant.parse.directory}/META-INF/NOTICE_httpclient.txt"/>

                                        <unzip src="${tempjars.directory}/httpcore-${version.org.apache.httpcomponents}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/LICENSE"
                                              tofile="${ant.parse.directory}/META-INF/LICENSE_httpcore.txt"/>
                                        <move file="${ant.parse.directory}/META-INF/NOTICE"
                                              tofile="${ant.parse.directory}/META-INF/NOTICE_httpcore.txt"/>

                                        <unzip src="${tempjars.directory}/jettison-${version.org.codehaus.jettison}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/LICENSE"
                                              tofile="${ant.parse.directory}/META-INF/LICENSE_jettison.txt"/>

                                        <unzip src="${tempjars.directory}/modeshape-jdbc-${project.version}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/services/java.sql.Driver"
                                              tofile="${project.build.directory}/tempdrivers/jdbc_drivers"/>

                                        <unzip src="${tempjars.directory}/modeshape-jdbc-local-${project.version}.jar"
                                               dest="${ant.parse.directory}"/>
                                        <move file="${ant.parse.directory}/META-INF/services/java.sql.Driver"
                                              tofile="${project.build.directory}/tempdrivers/jdbc_local_drivers"/>
                                        
                                        <concat destfile="${ant.parse.directory}/META-INF/services/java.sql.Driver"
                                                fixlastline="yes">
                                            <fileset file="${project.build.directory}/tempdrivers/jdbc_drivers"/>
                                            <fileset file="${project.build.directory}/tempdrivers/jdbc_local_drivers"/>
                                        </concat>

                                        <delete dir="${tempjars.directory}"/>
                                        <delete dir="${project.build.directory}/tempdrivers"/>
                                        <delete dir="${ant.parse.directory}/META-INF/maven"/>
                                        <delete dir="${ant.parse.directory}/META-INF/Manifest.mf"/>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>