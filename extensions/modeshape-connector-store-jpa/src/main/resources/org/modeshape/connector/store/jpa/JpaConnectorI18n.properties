#
# ModeShape (http://www.modeshape.org)
# See the COPYRIGHT.txt file distributed with this work for information
# regarding copyright ownership.  Some portions may be licensed
# to Red Hat, Inc. under one or more contributor license agreements.
# See the AUTHORS.txt file in the distribution for a full listing of 
# individual contributors. 
#
# ModeShape is free software. Unless otherwise indicated, all code in ModeShape
# is licensed to you under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# ModeShape is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
#

connectorName = JPA Graph Store Connector
nodeDoesNotExist = Could not find an existing node at {0}
propertyIsRequired = The {0} property is required but has no value
errorFindingDataSourceInJndi = Repository source {0} unable to find DataSource in JNDI at {1}
repositorySourceMustHaveName = The JPA Graph Store repository source must have a name
unknownModelName = The model name "{0}" is unknown; expected one of {1}
errorSettingContextClassLoader = Error while setting the current context class loader for JAP repository source {0} to classloader name {1}
existingStoreSpecifiesUnknownModel = The JPA repository source {0} uses a model that is not known\: {1} 
unableToReadLargeValue = Unable to read from {0} the large property with hash = {1}
unableToMoveRootNode = Unable to move the root node to another location in {0}
locationShouldHavePathAndOrProperty = The source {0} is unable to find a node without a path or a {1} property
invalidUuidForWorkspace = There is no node with UUID "{0}" in workspace "{1}"
invalidReferences = One or more references were invalid in {0}
unableToDeleteBecauseOfReferences = At least one deleted node is referenced by a node that is not being deleted
invalidIsolationLevel = An invalid isolation level "{0}" was specified. Valid isolation levels are '0' for TRANSACTION_NONE, '1' for TRANSACTION_READ_UNCOMMITTED, '2' for TRANSACTION_READ_COMMITTED, '4' for TRANSACTION_REPEATABLE_READ, and '8' for TRANSACTION_SERIALIZABLE (as defined in the java.sql.Connection class). The default is to not set this, which means that the isolation will not be set (and the JDBC DataSource's own isolation level will be used).
dialectCouldNotBeDeterminedAndMustBeSpecified = The Hibernate dialect could not be automatically determined, and therefore must be specified on the specification for the '{0}' repository source.


workspaceAlreadyExists = The source {0} already has a workspace named "{1}"
workspaceDoesNotExist = The source {0} has no workspace named "{1}"
unableToCreateWorkspaces = The source {0} does not allow creating workspaces
connectionIsNoLongerOpen = This connection for source {0} has already been closed

basicModelDescription = Database model that stores node properties as opaque records and children as transparent records. Large property values are stored separately.
simpleModelDescription = Database model that stores nodes (transparently) and their properties (opaquely) in the same row. Large property values are stored separately.

namePropertyDescription = The name of the repository source, which must be unique within the ModeShape configuration.
namePropertyLabel = Source Name
namePropertyCategory =
rootNodeUuidPropertyDescription = Optional property that, if used, defines the UUID of the root node in this repository. If no value is specified, a random UUID is generated each time that the repository is started.
rootNodeUuidPropertyLabel = UUID of Root Node
rootNodeUuidPropertyCategory = 
creatingWorkspacesAllowedPropertyDescription = Optional property that defines whether clients can create new workspaces. The default value is "true".
creatingWorkspacesAllowedPropertyLabel = Creating Workspaces Allowed
creatingWorkspacesAllowedPropertyCategory = Workspaces
defaultWorkspaceNamePropertyDescription = Optional property that defines the name for the workspace that will be used by default if none is specified. The default value is an empty string.
defaultWorkspaceNamePropertyLabel = Default Workspace Name
defaultWorkspaceNamePropertyCategory = Workspaces
predefinedWorkspaceNamesPropertyDescription = Optional property that specifies the names of the workspaces that are available at startup and need not be created before being used. This can be coupled with a "false" value for the "Creating Workspaces Allowed" property to allow only the use of only predefined workspaces.. The default value is an an empty array.
predefinedWorkspaceNamesPropertyLabel = Predefined Workspace Names
predefinedWorkspaceNamesPropertyCategory = Workspaces
retryLimitPropertyDescription = Optional property that defines the number of times that any single operation on a connection to this source should be retried following a communication failure. The default value is '0'.
retryLimitPropertyLabel = Retry Limit
retryLimitPropertyCategory = Advanced
updatesAllowedPropertyDescription = Specifies whether the source content can be updated or changed.
updatesAllowedPropertyLabel = Allows Updates
updatesAllowedPropertyCategory = Advanced

dataSourceJndiNamePropertyDescription = The JNDI name of the JDBC DataSource instance that should be used. If not specified, the other driver properties must be set.
dataSourceJndiNamePropertyLabel = JNDI Name of Data Source
dataSourceJndiNamePropertyCategory = Data Source

dialectPropertyDescription = The dialect of the database. If not specified, it will be auto-determined. Otherwise, this must match one of the Hibernate dialect names, and must correspond to the type of driver being used. Examples include (but are not limited to) "org.hibernate.dialect.MySQLInnoDBDialect", "org.hibernate.dialect.Oracle10gDialect", "org.hibernate.dialect.PostgreSQLDialect", and "org.hibernate.dialect.HSQLDialect". For details, see the Hibernate documentation.
dialectPropertyLabel = Dialect
dialectPropertyCategory =

passwordPropertyDescription = The password that should be used when creating JDBC connections using the JDBC driver class. This is not required if the DataSource is found in JNDI.
passwordPropertyLabel = Password
passwordPropertyCategory = Driver

schemaNamePropertyDescription = The name of the schema that should be used when creating JDBC connections using the JDBC driver class. If this is not set, the default schema for the database user will be used.
schemaNamePropertyLabel = Schema Name
schemaNamePropertyCategory = Driver

usernamePropertyDescription = The username that should be used when creating JDBC connections using the JDBC driver class. This is not required if the DataSource is found in JNDI.
usernamePropertyLabel = Username
usernamePropertyCategory = Driver

urlPropertyDescription = The URL that should be used when creating JDBC connections using the JDBC driver class. This is not required if the DataSource is found in JNDI.
urlPropertyLabel = Database URL
urlPropertyCategory = Driver

driverClassNamePropertyDescription = The name of the JDBC driver class. This is not required if the DataSource is found in JNDI, but is required otherwise.
driverClassNamePropertyLabel = Driver Class Name
driverClassNamePropertyCategory = Driver

driverClassloaderNamePropertyDescription = The name of the class loader or classpath that should be used to load the JDBC driver class. This is not required if the DataSource is found in JNDI.
driverClassloaderNamePropertyLabel = Driver Classloader Name
driverClassloaderNamePropertyCategory = Driver

isolationLevelPropertyDescription = The isolation level that should be used when connecting to the database.
isolationLevelPropertyLabel = Database Isolation Level
isolationLevelPropertyCategory = Driver

maximumConnectionsInPoolPropertyDescription = The maximum number of connections that may be in the connection pool. The default is "5". This is not required if the DataSource is found in JNDI.
maximumConnectionsInPoolPropertyLabel = Maximum Connection Pool Size
maximumConnectionsInPoolPropertyCategory = Driver

minimumConnectionsInPoolPropertyDescription = The minimum number of connections that will be kept in the connection pool. The default is "0".
minimumConnectionsInPoolPropertyLabel = Minimum Connection Pool Size
minimumConnectionsInPoolPropertyCategory = Connection Pool

maximumConnectionIdleTimeInSecondsPropertyDescription = The maximum number of seconds that a connection can remain idle in the pool before it is closed. The default is "600" seconds (or 10 minutes).
maximumConnectionIdleTimeInSecondsPropertyLabel = Maximum Connection Idle Time
maximumConnectionIdleTimeInSecondsPropertyCategory = Connection Pool

maximumSizeOfStatementCachePropertyDescription = The maximum number of statements that should be cached. Statement caching can be disabled by setting to "0". The default is "100".
maximumSizeOfStatementCachePropertyLabel = Maximum Statement Cache Size
maximumSizeOfStatementCachePropertyCategory = Connection Pool

numberOfConnectionsToAcquireAsNeededPropertyDescription = The number of connections that should be added to the pool when there are not enough to be used. The default is "1".
numberOfConnectionsToAcquireAsNeededPropertyLabel = Connection Acquisition Size
numberOfConnectionsToAcquireAsNeededPropertyCategory = Connection Pool

idleTimeInSecondsBeforeTestingConnectionsPropertyDescription = The number of seconds that a connection can remain idle before the connection should be tested to ensure it is still valid. The default is 180 seconds (or 3 minutes).
idleTimeInSecondsBeforeTestingConnectionsPropertyLabel = Idle Time Before Testing Connections
idleTimeInSecondsBeforeTestingConnectionsPropertyCategory = Connection Pool

cacheTimeToLiveInMillisecondsPropertyDescription = Optional property that defines the maximum time in milliseconds that any information returned by this connector is allowed to be cached before being considered invalid. When not used, this source will not define a specific duration for caching information. The default value is "600000" milliseconds, or 10 minutes.
cacheTimeToLiveInMillisecondsPropertyLabel = Cache TTL
cacheTimeToLiveInMillisecondsPropertyCategory = Database

largeValueSizeInBytesPropertyDescription = An advanced boolean property that controls the size of property values at which they are considered to be "large values". Depending upon the model, large property values may be stored in a centralized area and keyed by a secure hash of the value. This is an space and performance optimization that stores each unique large value only once. The default value is "1024" bytes, or 1 kilobyte.
largeValueSizeInBytesPropertyLabel = Large Value Size
largeValueSizeInBytesPropertyCategory = Database

showSqlPropertyDescription = Defines whether the database-specific SQL is written to the console as it is used. This is useful for debugging purposes, and has a default value of "false".
showSqlPropertyLabel = Show SQL in Console
showSqlPropertyCategory = Database

compressDataPropertyDescription = Dictates whether large binary and string values should be stored in a compressed form. This is enabled by default. Setting this value only affects how new records are stored; records can always be read regardless of the value of this setting. The default value is "true".
compressDataPropertyLabel = Compress Data
compressDataPropertyCategory = Database

referentialIntegrityEnforcedPropertyDescription = (Deprecated) Specifies whether the database schema should use referential integrity to check constraints. This is currently always enabled.
referentialIntegrityEnforcedPropertyLabel = Referential Integrity
referentialIntegrityEnforcedPropertyCategory = Database

autoGenerateSchemaPropertyDescription = Sets the Hibernate setting dictating what it does with the database schema upon first connection. Valid values are:\n"create" - Create the database schema objects when the EntityManagerFactory is created (actually when Hibernate's SessionFactory is created by the entity manager factory). If a file named "import.sql" exists in the root of the class path (e.g., '/import.sql') Hibernate will read and execute the SQL statements in this file after it has created the database objects. Note that Hibernate first delete all tables, constraints, or any other database object that is going to be created in the process of building the schema.\n"create-drop" - Same as "create", except that the schema will be dropped after the EntityManagerFactory is closed.\n"update" - Attempt to update the database structure to the current mapping (but does not read and invoke the SQL statements from "import.sql"). Use with caution.\n"validate" - Validates the existing schema with the current entities configuration, but does not make any changes to the schema (and does not read and invoke the SQL statements from "import.sql"). This is often the proper setting to use in production, and thus this is the default value.
autoGenerateSchemaPropertyLabel = Autogenerate Schema
autoGenerateSchemaPropertyCategory = Database

modelNamePropertyDescription = Specifies the type of storage schema that is used. Currently, the only supported value is "Simple".
modelNamePropertyLabel = Storage Schema
modelNamePropertyCategory = Database

cacheProviderClassNamePropertyDescription = Specifies the class name of the cache provider.  The default value of "null" indicates that no caching should occur.  Changes made to this value at runtime will be ignored.
cacheProviderClassNamePropertyLabel = Cache Provider Class Name
cacheProviderClassNamePropertyCategory = Advanced

cacheConcurrencyStrategyPropertyDescription = Specifies the cache concurrency strategy to use.  When Hibernate is used as the JPA provider, valid values are "read-only", "transactional", "nonstrict-read-write", and "read-write".  Changes made to this value at runtime will be ignored.
cacheConcurrencyStrategyPropertyLabel = Cache Concurrency Strategy
cacheConcurrencyStrategyPropertyCategory = Advanced