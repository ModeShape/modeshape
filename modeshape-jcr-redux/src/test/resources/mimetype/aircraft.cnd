/*
 * ModeShape (http://www.modeshape.org)
 * See the COPYRIGHT.txt file distributed with this work for information
 * regarding copyright ownership.  Some portions may be licensed
 * to Red Hat, Inc. under one or more contributor license agreements.
 * See the AUTHORS.txt file in the distribution for a full listing of 
 * individual contributors. 
 *
 * ModeShape is free software. Unless otherwise indicated, all code in ModeShape
 * is licensed to you under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * ModeShape is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
 
//------------------------------------------------------------------------------
// N A M E S P A C E S
//------------------------------------------------------------------------------
<jcr='http://www.jcp.org/jcr/1.0'>
<nt='http://www.jcp.org/jcr/nt/1.0'>
<mix='http://www.jcp.org/jcr/mix/1.0'>
<air='http://www.modeshape.org/examples/aircraft/1.0'>

//------------------------------------------------------------------------------
// N O D E T Y P E S
//------------------------------------------------------------------------------

[air:Aircraft] > nt:unstructured
  - air:maker (string)
  - air:model (string)
  - air:designedBy (string)
  - air:introduced (string) < "(19|20)\d{2}"                // any 4 digit number starting with '19' or '20'
  - air:range (string)                                      // any integer (with optional ',' every 1000s place)
     < "\d{1,3}(,?\d{3})*\s*(nm|m|km|mi|ft)"                // followed by 'nm', 'm', 'km', 'mi', or 'ft'
  - air:maxSpeed (string)                                   // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(kt|mph|km/h|kmph)'              // followed by 'kt', 'mph', 'km/h' or 'kmph'
  - air:takeoffSpeed (string)                               // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(kt|mph|km/h|kmph)'              // followed by 'kt', 'mph', 'km/h' or 'kmph'
  - air:cruiseSpeed (string)                                // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(kt|mph|km/h|kmph)'              // followed by 'kt', 'mph', 'km/h' or 'kmph'
  - air:emptyWeight (string)                                // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(lb|kg)'                         // followed by 'lb' or 'kg'
  - air:maxWeight (string)                                  // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(lb|kg)'                         // followed by 'lb' or 'kg'
  - air:rateOfClimb (string)                                // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(ft|km|m)/(s|min)'               // followed by 'ft/s', 'ft/min', 'km/s', 'km/min', 'm/s', or 'm/min'
  - air:serviceCeiling (string)                             // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(nm|m|km|mi|ft)'                 // followed by 'nm', 'm', 'km', 'mi', or 'ft'
  - air:fuelCapacity (string)                               // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*(lb|kg|gal|L)'                   // followed by 'lb', 'kg', 'gal', or 'L'
  - air:crew (long) < '[0,)'                                // any non-negative value
  - air:numberBuilt (string)                                // any integer (with optional ',' every 1000s place)
    < '\d{1,3}(,?\d{3})*\s*[+]?' ,                          // optionally followed by '+'
      '([<>]\s*)?\d{1,3}(,?\d{3})*'                         // or prefixed by '<' or '>'
  - air:url (string)
