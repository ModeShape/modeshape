#
# ModeShape (http://www.modeshape.org)
# See the COPYRIGHT.txt file distributed with this work for information
# regarding copyright ownership.  Some portions may be licensed
# to Red Hat, Inc. under one or more contributor license agreements.
# See the AUTHORS.txt file in the distribution for a full listing of 
# individual contributors. 
#
# ModeShape is free software. Unless otherwise indicated, all code in ModeShape
# is licensed to you under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# ModeShape is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this software; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
# 

repositoryEngineIsNotRunning = The repository engine is not currently running

errorDeterminingIfConnectionIsAlive = Unexpected error trying to determine if connector "{0}" is alive.
errorDeterminingTotalInUseConnections = Unexpected error trying to determine if number of in use connections for  "{0}".
errorDeterminingTotalActiveSessions = Unexpected error trying to determine if number of active sessions for  "{0}".
errorGettingRepositoryFromEngine = Unexpected error trying to obtain repository "{0}" from engine.
errorGettingPropertiesFromManagedObject = = Unexpected error trying to obtain properties for ManagedObject "{0}".
errorBindingToJNDI = Error trying to obtain repository "{0}" from engine.

logModeShapeBoundToJNDI = ModeShape Repositories bound to JNDI at name "{0}".
logModeShapeUnBoundToJNDI = Unbound ModeShape Repositories unbound from JNDI name "{0}" 

# Subsystem
modeshape=The configuration of the ModeShape subsystem
modeshape.add = Add the ModeShape subsystem
modeshape.remove = Remove the ModeShape subsystem

# Repository
modeshape.repository = ModeShape repository
modeshape.repository.add = Add ModeShape repositories
modeshape.repository.remove = Remove ModeShape repositories
modeshape.repository.name = The name of the repository
modeshape.repository.configuration = Repository configuration
modeshape.repository.cache-name = The name of the Infinispan cache that is to be used for storing this repository's content
modeshape.repository.cache-container = The name of the Infinispan cache container that contains the cache to be used for storing this repoitory's content
modeshape.repository.jndi-name = The optional name in JNDI where this repository is to be registered
modeshape.repository.cluster-name = Defines the name of the communication channel used by this and other clustered repositories.
modeshape.repository.cluster-stack = Defines the JGroups stack used by the repository when clustered.
modeshape.repository.enable-monitoring = Enable monitoring of the repository
modeshape.repository.security-domain = The name of the security domain used for JAAS authentication and authorization of repository users
modeshape.repository.anonymous-roles= The roles given to all anonymous users for accessing and changing repository content
modeshape.repository.anonymous-roles.anonymous-role = The roles given to all anonymous users for accessing and changing repository content
modeshape.repository.anonymous-username = The username that is used for all anonymous users
modeshape.repository.use-anonymous-upon-failed-authentication = Specify whether users that fail authentication should be automatically logged in as anonymous users
modeshape.repository.default-workspace = The name of the workspace that is used when clients don't specify a workspace name
modeshape.repository.predefined-workspace-names = The list of workspace names that exist when the repository is started
modeshape.repository.predefined-workspace-names.predefined-workspace-name = The name of a workspace that exists when the repository is started
modeshape.repository.allow-workspace-creation = Specifies whether workspaces can be created (and removed) by cliens, if those clients are authorized
modeshape.repository.index-format = The format in which the indexes are to be written
modeshape.repository.rebuild-indexes-upon-startup = Specifies when (if at all) the indexes should be rebuilt upon repository startup
modeshape.repository.analyzer-classname = The name of the Lucene Analyzer class that extracts indexable tokens from repository content
modeshape.repository.analyzer-module = The name of the module that contains the Lucene Analyzer, or blank if it is included within the ModeShape or Lucene modules
modeshape.repository.minimum-binary-size = The size threshold that dictates whether String and binary values should be stored in the binary store. String and binary values smaller than this value are stored with the node, whereas string and binary values with a size equal to or greater than this limit will be stored separately from the node and in the binary store, keyed by the SHA-1 hash of the value.
modeshape.repository.indexing-thread-pool = The name of the thread pool that the repository indexing system should use
modeshape.repository.indexing-batch-size = The size of the indexing batches
modeshape.repository.indexing-reader-strategy = The strategy for sharing (or not sharing) index readers
modeshape.repository.indexing-mode = The concurrency mode for indexing
modeshape.repository.system-content-indexing-mode = The concurrency mode for indexing system content
modeshape.repository.indexing-async-thread-pool-size = The size of the thread pool used for asynchronous indexing
modeshape.repository.indexing-async-max-queue-size = The maximum size of the queue used for asynchronous indexing
modeshape.repository.indexing-analyzer-classname = The fully-qualified name of the Lucene analyzer implementation class
modeshape.repository.indexing-analyzer-module = The name of the module that contains the specified analyzer class
modeshape.repository.indexing-rebuild-indexes-upon-startup = When to rebuild the indexes as the repository starts

# Sequencer
modeshape.repository.sequencer = ModeShape sequencer
modeshape.repository.sequencer.add = Add ModeShape sequencer
modeshape.repository.sequencer.remove = Remove ModeShape sequencer
modeshape.repository.sequencer.name = The name of a sequencer
modeshape.repository.sequencer.description = The description for a sequencer
modeshape.repository.sequencer.classname = The fully-qualified name (including packages) of the sequencer class, or optionally the alias of one of the built-in sequencers.
modeshape.repository.sequencer.module = The name of the module that contains the sequencer class.
modeshape.repository.sequencer.path-expressions = The expressions that describes the paths upon which this sequencer operates and the paths where the sequencer output is written.
modeshape.repository.sequencer.path-expressions.path-expression = An expression that describes the paths upon which this sequencer operates and the paths where the sequencer output is written.


# Storage
modeshape.repository.configuration.index-storage=Storage of index
modeshape.repository.configuration.binary-storage=Binary storage

# Binary storage
modeshape.repository.binary-storage = Specifies where the repository's binary values are stored
modeshape.repository.binary-storage.add = Add binary storage 
modeshape.repository.binary-storage.remove = Remove the binary storage configuration, resulting in the binaries being stored on the local file system
modeshape.repository.binary-storage.storage-type = Valid values: file, cache, database, custom

modeshape.repository.file-binary-storage = Store binary values on the file system
modeshape.repository.file-binary-storage.describe = Specify that the repository binary values are to be stored on the file system
modeshape.repository.file-binary-storage.add = Store binary values on the file system
modeshape.repository.file-binary-storage.remove = Remove the binary storage configuration, resulting in the binaries being stored on the local file system
modeshape.repository.file-binary-storage.binary-storage-type = The type of binary storage 
modeshape.repository.file-binary-storage.minimum-binary-size = The size threshold that dictates whether String and binary values should be stored in the binary store. String and binary values smaller than this value are stored with the node, whereas string and binary values with a size equal to or greater than this limit will be stored separately from the node and in the binary store, keyed by the SHA-1 hash of the value. This is a space and performance optimization that stores each unique large value only once.
modeshape.repository.file-binary-storage.path = The path to the directory where the binary values are to be stored
modeshape.repository.file-binary-storage.relative-to = The (optional) path to the directory that the 'path' parameter is relative to

modeshape.repository.cache-binary-storage = Store binary values in Infinispan
modeshape.repository.cache-binary-storage.describe = Specify that the repository binary values are to be stored in Infinispan
modeshape.repository.cache-binary-storage.add = Store binary values in Infinispan
modeshape.repository.cache-binary-storage.remove = Remove the binary storage configuration, resulting in the binaries being stored on the local file system
modeshape.repository.cache-binary-storage.binary-storage-type = The type of binary storage 
modeshape.repository.cache-binary-storage.minimum-binary-size = The size threshold that dictates whether String and binary values should be stored in the binary store. String and binary values smaller than this value are stored with the node, whereas string and binary values with a size equal to or greater than this limit will be stored separately from the node and in the binary store, keyed by the SHA-1 hash of the value. This is a space and performance optimization that stores each unique large value only once.
modeshape.repository.cache-binary-storage.data-cache-name = The name of the Infinispan cache where the binary values will be stored. If not provided, the default will be '<repositoryName>-binary-data'.
modeshape.repository.cache-binary-storage.metadata-cache-name = The name of the Infinispan cache where the binary metadata will be stored. If not provided, the default will be '<repositoryName>-binary-metadata'.
modeshape.repository.cache-binary-storage.cache-container = The name of the Infinispan container where the caches are found. If not provided, the default will be the same container used for the repository content.

modeshape.repository.db-binary-storage = Store binary values in a SQL database
modeshape.repository.db-binary-storage.describe = Specify that the repository binary values are to be stored in a SQL database
modeshape.repository.db-binary-storage.add = Store binary values in a SQL database
modeshape.repository.db-binary-storage.remove = Remove the binary storage configuration, resulting in the binaries being stored on the local file system
modeshape.repository.db-binary-storage.binary-storage-type = The type of binary storage 
modeshape.repository.db-binary-storage.minimum-binary-size = The size threshold that dictates whether String and binary values should be stored in the binary store. String and binary values smaller than this value are stored with the node, whereas string and binary values with a size equal to or greater than this limit will be stored separately from the node and in the binary store, keyed by the SHA-1 hash of the value. This is a space and performance optimization that stores each unique large value only once.
modeshape.repository.db-binary-storage.data-source-jndi-name = The name in JNDI for the JDBC data source that should be used to store the binary values.

modeshape.repository.custom-binary-storage = Store binary values in a custom store
modeshape.repository.custom-binary-storage.describe = Specify that the repository binary values are to be stored in a custom store
modeshape.repository.custom-binary-storage.add = Store binary values in a custom store
modeshape.repository.custom-binary-storage.remove = Remove the binary storage configuration, resulting in the binaries being stored on the local file system
modeshape.repository.custom-binary-storage.binary-storage-type = The type of binary storage 
modeshape.repository.custom-binary-storage.minimum-binary-size = The size threshold that dictates whether String and binary values should be stored in the binary store. String and binary values smaller than this value are stored with the node, whereas string and binary values with a size equal to or greater than this limit will be stored separately from the node and in the binary store, keyed by the SHA-1 hash of the value. This is a space and performance optimization that stores each unique large value only once.
modeshape.repository.custom-binary-storage.classname = The fully-qualified name of the class used for index storage
modeshape.repository.custom-binary-storage.module = The name of the module that contains the specified index storage class


# Index storage
modeshape.repository.index-storage = Specifies where the repository indexes are stored
modeshape.repository.index-storage.add = Add index storage configuration
modeshape.repository.index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.index-storage.storage-type = Valid values: RAM, local file, master file, slave file, cache, custom

modeshape.repository.ram-index-storage = Store indexes in RAM
modeshape.repository.ram-index-storage.describe = Specify that the repository indexes are to be stored in RAM
modeshape.repository.ram-index-storage.add = Store indexes in RAM
modeshape.repository.ram-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.ram-index-storage.index-storage-type = The type of storage used for the indexes

modeshape.repository.local-file-index-storage = Store indexes on the local file system (non-clustered usage only)
modeshape.repository.local-file-index-storage.describe = Specify that the repository indexes are to be stored on the local file system
modeshape.repository.local-file-index-storage.add = Store indexes on the local file system
modeshape.repository.local-file-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.local-file-index-storage.index-storage-type = The type of storage used for the indexes
modeshape.repository.local-file-index-storage.index-format = The format in which the indexes are to be written
modeshape.repository.local-file-index-storage.path = The path to the directory where the indexes are to be stored
modeshape.repository.local-file-index-storage.relative-to = The (optional) path to the directory that the 'path' parameter is relative to
modeshape.repository.local-file-index-storage.access-type = The exact type of Lucene FSDirectory implementation to be used. If set to 'auto' (the default), NIOFSDirectory will be used on non Windows systems and SimpleFSDirectory will be used on Windows. If set to 'simple', then SimpleFSDirectory will be used. If set to 'nio', then NIOFSDirectory will be used. If set to 'mmap', then MMapDirectory will be used. Make sure to refer to Javadocs of these Directory implementations before changing this setting. Even though NIOFSDirectory or MMapDirectory can bring substantial performace boosts they also have constraints and limitations.
modeshape.repository.local-file-index-storage.locking-strategy = The type of locking used to prevent concurrent writes to the indexes. The default locking strategy works well for most cases. If set to 'simple', a marker file will be created using the Java File API (this file may need to be manually removed if the process is terminated abormally). If set to 'native' (the default), a marker file will be created using native OS file locks (which will never need to be cleaned up). If set to 'single', an in-memory Java object is used for the lock, and therefore not useful in a clustered repository. If 'none' is used, no locking is used to prevent concurrent writes (use with caution).

modeshape.repository.master-file-index-storage = Store indexes on the local file system, for clustered usage only
modeshape.repository.master-file-index-storage.describe = Specify that the repository indexes are to be stored on the file system and used as the master copy for the cluster
modeshape.repository.master-file-index-storage.add = Store the cluster-wide master indexes on the file system
modeshape.repository.master-file-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.master-file-index-storage.index-storage-type = The type of storage used for the indexes
modeshape.repository.master-file-index-storage.index-format = The format in which the indexes are to be written
modeshape.repository.master-file-index-storage.path = The path to the directory where the indexes are to be stored
modeshape.repository.master-file-index-storage.relative-to = The (optional) path to the directory that the 'path' parameter is relative to
modeshape.repository.master-file-index-storage.access-type = The exact type of Lucene FSDirectory implementation to be used. If set to 'auto' (the default), NIOFSDirectory will be used on non Windows systems and SimpleFSDirectory will be used on Windows. If set to 'simple', then SimpleFSDirectory will be used. If set to 'nio', then NIOFSDirectory will be used. If set to 'mmap', then MMapDirectory will be used. Make sure to refer to Javadocs of these Directory implementations before changing this setting. Even though NIOFSDirectory or MMapDirectory can bring substantial performace boosts they also have constraints and limitations.
modeshape.repository.master-file-index-storage.locking-strategy = The type of locking used to prevent concurrent writes to the indexes. The default locking strategy works well for most cases. If set to 'simple', a marker file will be created using the Java File API (this file may need to be manually removed if the process is terminated abormally). If set to 'native' (the default), a marker file will be created using native OS file locks (which will never need to be cleaned up). If set to 'single', an in-memory Java object is used for the lock, and therefore not useful in a clustered repository. If 'none' is used, no locking is used to prevent concurrent writes (use with caution).
modeshape.repository.master-file-index-storage.source-path = The path to the (remote) file system directory to which the copy is to be written. This must not be the same resolved directory as 'path'.
modeshape.repository.master-file-index-storage.source-relative-to = The (optional) path to the (remote) file system directory that the 'source-path' parameter is relative to.
modeshape.repository.master-file-index-storage.refresh-period = The number of seconds specifying the frequency of copying the master index into the 'sourceLocation' directory. The copy is incremental, so it only copies the changes since the last copy. The recommended value for the refresh period is (at least) 50% higher that the time to copy the information, and defaults to 3600 seconds - 60 minutes.
modeshape.repository.master-file-index-storage.connection-factory-jndi-name = The name in JNDI where the JMS connection factory can be found. The value is often '/ConnectionFactory' by default in JBoss AS.
modeshape.repository.master-file-index-storage.queue-jndi-name = The name in JNDI where JMS queue can be found. The queue will be used to post work messages.

modeshape.repository.slave-file-index-storage = Store indexes on the local file system, for clustered usage only
modeshape.repository.slave-file-index-storage.describe = Specify that the repository indexes are to be stored on the file system and used as the master copy for the cluster
modeshape.repository.slave-file-index-storage.add = Store the cluster-wide master indexes on the file system
modeshape.repository.slave-file-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.slave-file-index-storage.index-storage-type = The type of storage used for the indexes
modeshape.repository.slave-file-index-storage.index-format = The format in which the indexes are to be written
modeshape.repository.slave-file-index-storage.path = The path to the directory where the indexes are to be stored
modeshape.repository.slave-file-index-storage.relative-to = The (optional) path to the directory that the 'path' parameter is relative to
modeshape.repository.slave-file-index-storage.access-type = The exact type of Lucene FSDirectory implementation to be used. If set to 'auto' (the default), NIOFSDirectory will be used on non Windows systems and SimpleFSDirectory will be used on Windows. If set to 'simple', then SimpleFSDirectory will be used. If set to 'nio', then NIOFSDirectory will be used. If set to 'mmap', then MMapDirectory will be used. Make sure to refer to Javadocs of these Directory implementations before changing this setting. Even though NIOFSDirectory or MMapDirectory can bring substantial performace boosts they also have constraints and limitations.
modeshape.repository.slave-file-index-storage.locking-strategy = The type of locking used to prevent concurrent writes to the indexes. The default locking strategy works well for most cases. If set to 'simple', a marker file will be created using the Java File API (this file may need to be manually removed if the process is terminated abormally). If set to 'native' (the default), a marker file will be created using native OS file locks (which will never need to be cleaned up). If set to 'single', an in-memory Java object is used for the lock, and therefore not useful in a clustered repository. If 'none' is used, no locking is used to prevent concurrent writes (use with caution).
modeshape.repository.slave-file-index-storage.source-path = The path to the (remote) file system directory to which the copy is to be written. This must not be the same resolved directory as 'path'.
modeshape.repository.slave-file-index-storage.source-relative-to = The (optional) path to the (remote) file system directory that the 'source-path' parameter is relative to.
modeshape.repository.slave-file-index-storage.refresh-period = The number of seconds specifying the frequency of copying the master index into the 'sourceLocation' directory. The copy is incremental, so it only copies the changes since the last copy. The recommended value for the refresh period is (at least) 50% higher that the time to copy the information, and defaults to 3600 seconds - 60 minutes.
modeshape.repository.slave-file-index-storage.connection-factory-jndi-name = The name in JNDI where the JMS connection factory can be found. The value is often '/ConnectionFactory' by default in JBoss AS.
modeshape.repository.slave-file-index-storage.queue-jndi-name = The name in JNDI where JMS queue can be found. The queue will be used to post work messages.
modeshape.repository.slave-file-index-storage.copy-buffer-size = The number of megabytes to move in a single low level copy instruction. The default is '16' (or 16MB).
modeshape.repository.slave-file-index-storage.retry-marker-lookup = The number of times to look for the marker files in the source directory before failing, waiting 5 seconds between each try. The default is '0'.
modeshape.repository.slave-file-index-storage.retry-initialize-period = The number of seconds before retrying initialization. If the slave can't find the master index, it will try again (in the background) until it's found, without preventing the application to start. Queries performed before the index is initialized are not blocked but will return empty results. A value of '0' is used by default, signaling that initialization will fail with an exception rather than trying in the background. To prevent the application from starting without an invalid index but still control an initialization timeout, use 'retryMarkerLookup' instead.

modeshape.repository.cache-index-storage = Store indexes in Infinispan
modeshape.repository.cache-index-storage.describe = Specify that the repository indexes are to be stored in Infinispan
modeshape.repository.cache-index-storage.add = Store indexes in Infinispan
modeshape.repository.cache-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.cache-index-storage.index-storage-type = The type of storage used for the indexes
modeshape.repository.cache-index-storage.index-format = The format in which the indexes are to be written
modeshape.repository.cache-index-storage.data-cache-name = The name of the Infinispan cache where the index data will be stored. If not provided, the default will be '<repositoryName>-index-data'.
modeshape.repository.cache-index-storage.metadata-cache-name = The name of the Infinispan cache where the index metadata will be stored. If not provided, the default will be '<repositoryName>-index-metadata'.
modeshape.repository.cache-index-storage.lock-cache-name = The name of the Infinispan cache where the index locks will be stored. If not provided, the default will be '<repositoryName>-index-locks'.
modeshape.repository.cache-index-storage.cache-container-jndi-name = The name in JNDI for the Infinispan container where the caches are found. If not provided, the default will be the same container used for the repository content.
modeshape.repository.cache-index-storage.chunk-size = The maximum size in bytes for each chunk of data. Larger sizes offer better search performance but might be problematic during network replication or storage. The default is 16KB, or 16834.

modeshape.repository.custom-index-storage = Store indexes in a custom store
modeshape.repository.custom-index-storage.describe = Specify that the repository indexes are to be stored in a custom store
modeshape.repository.custom-index-storage.add = Store indexes in a custom store
modeshape.repository.custom-index-storage.remove = Remove the index storage configuration, resulting in the indexes being stored on the local file system
modeshape.repository.custom-index-storage.index-storage-type = The type of storage used for the indexes
modeshape.repository.custom-index-storage.index-format = The format in which the indexes are to be written
modeshape.repository.custom-index-storage.classname = The fully-qualified name of the class used for index storage
modeshape.repository.custom-index-storage.module = The name of the module that contains the specified index storage class

# Binary storage

# Operation descriptions
